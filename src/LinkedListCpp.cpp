/*! \file */
/**
* @file LinkedListCpp.cpp
* @author Copyright (C) 2016 by Tim Fenlon
* @date 16 November 2016
* @brief implementation file for, singly linked list
*/
#include "LinkedListCpp.hpp"
#include <string>
#include <time.h>

using namespace std;

namespace linked_list_cpp
{
	/**
	* @brief CLinkList::mCLinkedList is singleton for CLinkedList class
	* @description creates a singleton unique ptr for CLinkedList class
	*/
	shared_ptr<CLinkedList> CLinkedList::mgCLinkedList;

	/**
	* @brief returns CLinkList::mCLinkedList is singleton for CLinkedList class
	* @description returns a singleton unique ptr for CLinkedList class
	*/
	shared_ptr<CLinkedList>& CLinkedList::getSingleton()
	{
		try {
			//In case no memory to allocate
			if (CLinkedList::mgCLinkedList.get() == nullptr)
			{
				CLinkedList::mgCLinkedList.reset(new CLinkedList());
			}
		}
		catch (bad_alloc& ba) {
			std::cerr << "CLinkedList::getSingleton() bad_alloc caught: " << ba.what() << '\n';
		}
		catch (exception& ex)
		{
			//Catch All for now
			cout << "CLinkedList::getSingleton() new CLinkedList() failed ex" << ex.what() << endl;
		}
		return CLinkedList::mgCLinkedList;
	}

	CListBase::CListBase(void)
	: mNumNodes(0)
	{
		mHeadNode.reset();
		mTailNode.reset();

		cout << "CListBase() ctor" << endl;
	}

	CListBase::~CListBase(void)
	{
		cout << "~CListBase() dtor" << endl;
	}

	CLinkedList::CLinkedList(void)
	{
		cout << "CLinkedList() ctor" << endl;
	}

	CLinkedList::~CLinkedList(void)
	{
		cout << "~CLinkedList() dtor" << endl;
	}

	int	CLinkedList::createNumRandomNodes(shared_ptr<CLinkedList>& node_list)
	{
		int result = 0;

		cout << endl << "Enter number of nodes to create?";
		string choice;
		getline(std::cin, choice);
		int num_choice = atoi(choice.c_str());
		if (result < 0) {
			cout << "some input error occurred" << endl;
			return 0;
		}
		else {
			cout << "User requested" << num_choice << endl;
			//Create number of nodes with node value generated by random operator
			time_t t;

			/* Intializes random number generator */
			srand((unsigned)time(&t));

			/* create linked list nodes from zero to iNumNodes */
			for (size_t i = 0; i < static_cast<size_t>(num_choice); i++)
			{
				cout << "Adding node[" << i << "]=" << rand() << endl;
			}
		}

		return 1;
	}

	int	CLinkedList::printAllLinkedListNodes(shared_ptr<CLinkedList>& node_list)
	{
		cout << "Selected printAllLinkedListNodes()" << endl << endl;
		return 1;
	}

	int	CLinkedList::printAllLinkedListNodesRecursive(shared_ptr<CLinkedList>& node_list)
	{
		cout << "Selected printAllLinkedListNodesRecursive()" << endl << endl;
		return 1;
	}

	int	CLinkedList::deleteAllLinkedListNodes(shared_ptr<CLinkedList>& node_list)
	{
		cout << "Selected deleteAllLinkedListNodes()" << endl << endl;
		return 1;
	}

	int	CLinkedList::deleteAllLinkedListNodesRecursive(shared_ptr<CLinkedList>& node_list)
	{
		cout << "Selected deleteAllLinkedListNodesRecursive()" << endl << endl;
		return 1;
	}

}//linked_list_cpp
